name: SCDF ML Training Pipelines Deployment
run-name: ${{ github.actor }} will deploy the latest version of SCDF ML Training Pipelines üöÄ
on: [push]
env:
  DATAFLOW_URI: http://scdf.tanzudatatap.ml
jobs:
  Deploy-SCDF-ML-Pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: |
          touch .env
          echo "${{ secrets.SCDF_ML_ENV_FILE }}" > ${{ github.workspace }}/.env
        name: Download environment variables
      - name: Dotenv Action
        id: dotenv
        uses: xom9ikk/dotenv@v2
      - name: Create RabbitMQ Prepare Script
        run: |
          touch prepare-rabbitmq.sh
          echo "rabbitmqctl list_queues --vhost ${{ env.PRODUCER_SCDF_ML_MODEL_RABBITMQ_VIRTUAL_HOST }} | awk '{print $1}' |  xargs -n1 rabbitmqctl purge_queue --vhost ${{ env.PRODUCER_SCDF_ML_MODEL_RABBITMQ_VIRTUAL_HOST }}" > prepare-rabbitmq.sh
          echo "exit 0" >> prepare-rabbitmq.sh
          chmod +x prepare-rabbitmq.sh
      - uses: actions-hub/kubectl@master
        name: Purge RabbitMQ queues (1)
        env:
          KUBE_CONFIG: ${{ secrets.SCDF_ML_KUBECONFIG }}
        with:
          args: cp prepare-rabbitmq.sh default/rabbitmq-0:/tmp
      - uses: actions-hub/kubectl@master
        name: Purge RabbitMQ queues (2)
        env:
          KUBE_CONFIG: ${{ secrets.SCDF_ML_KUBECONFIG }}
        with:
          args: exec rabbitmq-0 -- bash -c "/tmp/prepare-rabbitmq.sh"
      - run: |
          java -jar spring-cloud-dataflow-shell-2.9.2.jar --dataflow.uri=${{ env.DATAFLOW_URI }} --spring.shell.commandFile=commands/check-streams-commands.txt
        name: Update streaming pipeline if it does not exist, else create it
      - run: echo "üçè This job's status is ${{ job.status }}."
